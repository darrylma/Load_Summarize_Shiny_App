shiny::runApp('myApp')
runapp()
runApp()
runApp('myApp')
runApp('myApp')
runApp('myApp')
runApp('myApp')
runApp('myApp')
runApp('C:/Users/chma/Desktop/test')
runApp('C:/Users/chma/Desktop/test')
install.packages("miniUI")
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session){
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget()
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session){
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget()
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session){
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget()
multiplyNumbers <- function(){
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
server <- function(input, output, session){
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
multiplyNumbers()
multiplyNumbers <- function(numbers1, numbers2){
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
server <- function(input, output, session){
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
multiplyNumbers()
multiplyNumbers(4,5)
multiplyNumbers(1:20,1"20")
multiplyNumbers(1:20,1:20)
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, main = "Trees!", xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
pickTrees()
pickTrees()
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, main = "Trees!", xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush, xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
install.packages("googleVis")
library("googleVis")
Fruits
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width=600, height=400))
print(M, "chart")
plot(M)
Fruits
M <- gvisMotionChart(Fruits, "Sales", "Year", options = list(width=600, height=400))
plot(M)
?gvisMotionChart
Exports
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width=600, height=400))
plot(G)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width=600, height=400))
plot(M)
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width=600, height=400))
plot(G)
GM <- gvisMerge(G, M, horizontal = TRUE)
plot(GM)
unlink('C:/Users/chma/Desktop/GoogleVis_cache', recursive = TRUE)
install.packages("pandoc")
pandoc_available()
install.pandoc()
install.packages("installr")
install.pandoc()
if(!require(installr)) { install.packages("installr"); require(installr)}
install.pandoc()
install.pandoc()
install.pandoc()
install.pandoc()
pandoc_available
pandoc_available()
install.pandoc(URL = "https://github.com/jgm/pandoc/releases",
use_regex = TRUE, to_restart, ...)
install.pandoc(URL = "https://github.com/jgm/pandoc/releases",
use_regex = TRUE, to_restart)
setInternet2(TRUE)
install.pandoc()
install.pandoc()
install.pandoc()
install_pandoc()
install.packages("rmarkdown")
pandoc_available()
install.packages("plotly")
data("airmiles")
head(airmiles)
airmiles
g <- ggplot(data=diamonds, aes(x=carat, y=price)) + geom_point(aes(text = paste("Clarity: ", clarity)), size =4)
gg <- ggplotly(g)
gg
library(ggplot2)
library(plotly)
g <- ggplot(data=diamonds, aes(x=carat, y=price)) + geom_point(aes(text = paste("Clarity: ", clarity)), size =4)
gg <- ggplotly(g)
gg
?geom_point
?facet_grid
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(dplyr)
library(tidyr)
library(ggplot2)
g <- ggplot(data=diamonds, aes(x=carat, y=price)) + geom_point(size =1) + facet_grid(cols = clarity)
g <- ggplot(data=diamonds, aes(x=carat, y=price)) + geom_point(size =1) + facet_grid(cols = diamonds$clarity)
g <- ggplot(data=diamonds, aes(x=carat, y=price)) + geom_point(size =1) + facet_grid(cols = vars(clarity))
gg <- ggplotly(g)
gg
g <- ggplot(data=diamonds, aes(x=carat, y=price)) + geom_point(aes(text = paste("Clarity: ", clarity)), size =4)
gg <- ggplotly(g)
gg
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- mymap %>% addMarkers(lat=39.298, lng=-76.589, popup="Jeff Leek's Office")
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=39.298, lng=-76.589, popup="Jeff Leek's Office")
my_map
set.seed(2016-04-25)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>% leaflet() %>% addTiles() %>% addMarkers()
set.seed(2016-04-25)
df <- data.frame(lat = runif(500, min = 39.25, max = 39.35),
lng = runif(500, min = -76.65, max = -76.55))
df %>% leaflet() %>% addTiles() %>% addMarkers(clusterOptions = markerClusterOptions())
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
malaysia <- read.csv("malaysia.csv", header = TRUE)
malaysia
malaysia$City
malaysia <- read.csv("malaysia.csv", header = TRUE)
malaysia
shiny::runApp('Load_Summarize')
